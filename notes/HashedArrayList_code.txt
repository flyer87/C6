creat your own nested instead of using other class from IDictionary
=============
- ??? from .cs
	// TODO: If there are views all should the same underlying(???) _items 
	- public HashedArrayList(int capacity = 0, SCG.IEqualityComparer<T> equalityComparer = null) // why 0 ???
	- public bool Add(T item)
	- public bool AddRange(SCG.IEnumerable<T> items)
		- // TODO: insert range ???
	- public ICollectionValue<KeyValuePair<T, int>> ItemMultiplicities()
	- public virtual bool Remove(T item, out T removedItem)
		// ??? No duplicates => LastIndexOf(item) - What?!
	- public virtual bool RemoveRange(SCG.IEnumerable<T> items)
		//var itemsToRemove = new ArrayList<T>(items, EqualityComparer, AllowsNull); // ???
	- public T this[int index]
		- // No Require for the stter at IIndexed level ???
	- public void RemoveIndexRange(int startIndex, int count)
		// ??? Alternative: View(start, count).Clear();
	- public virtual void Insert(int index, T item)
		- // ???? Check for duplicates
	- public virtual void InsertRange(int index, SCG.IEnumerable<T> items)
		- // TODO: Use InsertPrivate() ??? 
		- continue; // throw an exception ???
	- private bool RemoveAllWhere(Func<T, bool> predicate)
		- //TODO: updatecheck() ???
	- private void ClearPrivate()
		// ???
	- private void Dispose(bool disposingUnderlying)
		- _views = null; // !!! ??? notes
	- private void RaiseForInsertRange(int index, T[] array) // ??? the index of the view or the _items
	- public override T Choose()
		- return _base._items[index]; // ??? Offset
- HashSet<T> itemIndex:
	- !!class HashSet<T> : CollectionBase<T>, ICollection<T>
	
Q:
	indexOf(T item)

- "maintains a hash table so that it can quickly find the position of a given item in the array list."
- "does not allow duplicates"
- C5.13.6 Implementation of hashed array lists
- Constant time for: Find, IndexOf, Contains, ... (instead of iterating over the items)

- ?FindorAddToHash - any other operations to support ???

- Contains, Remove
	- from SCG and ICollection<T> - I put virtual, since they have the same signature. Is it fine?
		
- Test:
	//- What is the properties in HALTests for? Cos when we create HAL, it already has the values
	
Tips:
	Clear()
		if prop. list -> Clear(); 
		if view -> RemoveIndexRange(0, v.Count);
	Add() -> InsertPrivate
		AddRange -> InsertRange()
	Remove() -> RemoveAt
=======================
TODO:
	- Use InsertPrivate() in InsertRange
	- private void RaiseForInsertRange(int index, T[] array) // ??? the index of the view or the _items
	- AddRange -> can we re-use InsertRange???
	- Add Code contracts to:
		private methods
		additional postconditions: look at Mikkel's implementations.
	- Properties: no Code Contracts for set {}
	- Some methods are the same as in ArrayList: Dispose() and others. Re-use them?
	- in Dispose(), else{} section, added: _views = null; Otherwise Clear(), calling 					FixViewsBeforeRemovePrivate(), throws: isValid should be true for the views. Is it fine?
		Code to reproduce:
		var collection = new HashedArrayList<string> { "1", "2", "3", "4" };
		var v = collection.View(1, 2);
		Console.WriteLine(v);
		collection.Dispose();
	- view after Dispose() can call: v.AllowsNull. But should we allow that?
	Views:
		- add not a view message
		- AddRange(items) {
			...
			RaiseForAddRange(items) //Are all items actually added?
		}