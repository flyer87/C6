CHECK FOR VERSIONUPDATE() IN LinkedList
	which methods?
ArrL - (_under ?? this).RaiseFor - included or not?
	indexes
===========	
??? from .cs
	- Invarints
		// Next pointers are not null ??? TODO: heavy
		// views are correct ??? 
	- Constructor
		AddRange(items); // ??? do we need it; virtual method
	- public virtual bool RetainRange(SCG.IEnumerable<T> items)
		- ClearPrivate(); // Clear() was here! But tests passed, altough Clear() rasises its own events ???                    
	- public virtual void InsertRange(int index, SCG.IEnumerable<T> items)
		- InsertRangePrivate(index, items); // ??? C5.LinkedList has last bool parameter
	- void SC.ICollection.CopyTo(Array array, int index)
		- try // why try ???
		- catch(InvalidCastException) //catch (ArrayTypeMismatchException) ???
	- private void InsertRangePrivate(int index, SCG.IEnumerable<T> items)
		- if (count == 0) // no need ??? The same reason as down!
	- private void RaiseForUpdate(T item, T oldItem)
		- // ActiveEvents check ???
	- private sealed class Node // Why not Node<T> ??
		- several ???
	- public override bool Equals(object obj) => CheckVersion() & base.Equals(obj); // base. ???
	- Range.public override int GetHashCode()
		- return base.GetHashCode(); // ??? calls again Object.GetHashCode(); base.
		- some other ???
===========
TODO:	
	- Invalidate views
	//!Check for Code contracts after implementation of IExtensible	
	- public bool UnsequencedEquals(ICollection<T> otherCollection)        
		Peter's is different
	- private bool RemoveAllWhere(Func<T, bool> predicate)
		- updateCheck == CheckVersion		
	- private sealed class ItemSet : CollectionValueBase<T>, ICollectionValue<T> // 
		??? CollectionValues base
	//- ADD: ObjectInvariants
	- FindOrAdd_FindItemDuringEnumeration_ThrowsNothing()
		throws Code Contratcs error if:
		 in Find(ref T item)
			propusna item = node.item;
	- Array.Copy() how does it work? Using enumerator or ?
	//- What is diff. between IList and IList<T>
	? Using SynchRoot for thread-safety ?
	- RaiseForInsert(int index, T item)
		, but OnItemInserted(item, index): switched positions
	- C5.LinkedList.InsertFirst - if (ActiveEvents != EventTypeEnum.None)
		- C6.arraylist.InsertFirst - nothing
		- me.LinkedList - if (!ActiveEvents.HasFlag(Inserted)) ???
	- raiseFor
		raiseForSetThis in C5.LinkedList.public virtual T this[int index]
		- index or Offset + index
		P.S. I also have in ArrayList
	//- remove Print() from IList
	- General: Slide returns the same view after sliding. Do we need it to return "this"
	chaining; xs.
		Effective Java, Bloch, second edition!!!
			changing + side effect ?!
	- RemoveIndexRange's Code Contracts in IIndexed
		Do I need to add: Requires(IsEmpty, CollectionMustBeNonReadOnly); or what ???
	- RemoweAllWhere looks ugly
		- what about //updatecheck();?
	- void SC.ICollection.CopyTo(Array array, int index)
		why try in the body
	- RaiseFor
		- ActiveEvents check
======
View:
	View changes in the methods:
		//- RaiseFor - incl Offset
	GetPairPrivate() // why out _starSentinel	
		try to undertsand how it and its subfucntions work
===========
C5:
	void InsertAll(int i, SCG.IEnumerable<T> items, bool insertion)
	redundant: if (count > 0) {}
=========
Tests:
	- ExpectedDirectedCollectionValue. Why no we need a class ???
====================	
Complex methods:
	private static Node mergeRuns(Node run1, Node run2, SCG.IComparer<T> c) // ???
		- SCG.IComparer<T> c or 
	private MutualViewPosition viewPosition(LinkedList<T> otherView)
		IList instead of LinkedList

================
Thesis notes:	
	view.Sort() changes the endSentinel of the previous and the next view (they get 1 more item)
	Code:
		var items = new[] { "-8", "Ab", "6", "-4", "5", "-2", "7", "1", "10", "8" };
		var collection = new LinkedList<string>(items);
		//collection.AddAll(items);
		var v0 = collection.View(0, 2);
		var vCount2 = collection.View(collection.Count - 2, 2);
		var v2 = collection.View(2, 2);
		var v4 = collection.View(4, 2);
		var v6 = collection.View(6, 2);

		v2.Sort();

		Console.WriteLine($"v0 = {v0}; Count = {v0.Count}; Offset = {v0.Offset}");
		Console.WriteLine($"v2 = {v2}");            
		Console.WriteLine($"v4 = {v4}; Count = {v4.Count}; Offset = {v4.Offset}");
		foreach (var item in v4) {
			Console.WriteLine(item);
		}

		Console.WriteLine($"v6 = {v6}");
		Console.WriteLine($"vCount2 = {vCount2}");
	//it was: private void raiseForInsertAll(Node node, int i, int added, bool insertion)
	//	now: private void RaiseForAddRange(SCG.IEnumerable<T> items)
	//- get -> getNodeAtPrivate
	//- common: find() and dnif - were combined with usage of Eumeration direction as paramter
	//- raiseFor: index mismatches
	//- redundant else's in C5.LinkedList
		public virtual bool IsSorted(SCG.IComparer<T> c)
	//- public virtual bool IsSorted(Comparison<T> comparison) 
		- new method, not existing in C5. Is it in C6's documentaion?
	//- General, code impl., common: Properties' getters can't throw an exception, BUT we throw. Reflect on it.	
	//- private void RaiseForIndexSetter(T oldItem, T newItem, int index)
		was: 
			raiseItemsRemoved(item, 1);
			raiseItemRemovedAt(item, index);
		now: 
			OnItemRemovedAt(oldItem, index);
			OnItemsRemoved(oldItem, 1);
	//- C5's private methods was renamed
		//- General, minor: Capital letter; ...Private suffix; var instead of a specific type.
	//- Reverse
		//no - PositionComparer: fields became private; expression-bobies added
		//- CircularQueue -> Queue; a new instance
		//no- Sorting.IntroSort<Position>(positions, 0, positions.Length, PositionComparer.Default)
			-> Array.Sort(positions, PositionComparer.Default);		        