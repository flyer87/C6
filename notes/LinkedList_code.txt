CHECK FOR VERSIONUPDATE() IN LinkedList
	which methods?
ArrL - (_under ?? this).RaiseFor - included or not?
	indexes


TODO:
	Add "virtual" to other properties/ methods ? So far only IExtensible p,m's
	
	//!Check for Code contracts after implementation of IExtensible	
	- public bool UnsequencedEquals(ICollection<T> otherCollection)        
		Peter's is different
	- private bool RemoveAllWhere(Func<T, bool> predicate)
		- updateCheck == CheckVersion
		
	- private sealed class ItemSet : CollectionValueBase<T>, ICollectionValue<T> // ??? CollectionValues base
	- ADD: ObjectInvariants
	- FindOrAdd_FindItemDuringEnumeration_ThrowsNothing()
		throws Code Contratcs error if:
		 in Find(ref T item)
			propusna item = node.item;
	- Array.Copy() how does it work? Using enumerator or ?
	- What is diff. between IList and IList<T>
	? Using SynchRoot for thread-safety ?
	- RaiseForInsert(int index, T item)
		, but OnItemInserted(item, index): switched positions
	- C5.LinkedList.InsertFirst - if (ActiveEvents != EventTypeEnum.None)
		- C6.arraylist.InsertFirst - nothing
		- me.LinkedList - if (!ActiveEvents.HasFlag(Inserted)) ???
	- raiseFor
		raiseForSetThis in C5.LinkedList.public virtual T this[int index]
		- index or Offset + index
		P.S. I also have in ArrayList
	- remove Print() from IList
	- Slide returns the same view after sliding. Do we need it to return "this"
	chaining; xs.
	Effective Java, Bloch, second edition!!!
		changing + side effect ?!
	- RemoveIndexRange's Code Contracts in IIndexed
		Add Requires(IsEmpty, CollectionMustBeNonReadOnly); or what ???
	- RemoweAllWhere looks ugly
		- what about //updatecheck();?
======
View:
	View changes in the methods:
		- RaiseFor - incl Offset
	GetPairPrivate() // why out _starSentinel	
		try to undertsand how it and its subfucntions work
===========
C5:
	void InsertAll(int i, SCG.IEnumerable<T> items, bool insertion)
	redundant: if (count > 0) {}
=========
Tests:
	- ExpectedDirectedCollectionValue. Why no we need a class ???
====================	
Complex methods:
	private static Node mergeRuns(Node run1, Node run2, SCG.IComparer<T> c) // ???
		- SCG.IComparer<T> c or 
	private MutualViewPosition viewPosition(LinkedList<T> otherView)
		IList instead of LinkedList

================
Thesis notes:	
	it was: private void raiseForInsertAll(Node node, int i, int added, bool insertion)
	now: private void RaiseForAddRange(SCG.IEnumerable<T> items)
	- get -> getNodeAtPrivate
	find() and dnif - were combined with usage of Eumeration direction as paramter
	- raiseFor: index mismatches
	- redundant else's in C5.LinkedList
		public virtual bool IsSorted(SCG.IComparer<T> c)
	- public virtual bool IsSorted(Comparison<T> comparison) - new method, not exisitn in C5. Is it in C6's documentaion?
	- Properties' getters can't throw an exception, BUT we throw. Reflect on it.	
	- private void RaiseForIndexSetter(T oldItem, T newItem, int index)
	 was: 
		raiseItemsRemoved(item, 1);
		raiseItemRemovedAt(item, index);
	 now: 
		OnItemRemovedAt(oldItem, index);
		OnItemsRemoved(oldItem, 1);
	- C5's private methods was renamed
		- Capital letter; ...Private suffix; var instead of a specific type.
	- Reverse
		- PositionComparer: fields became private; expression-bobies added
		- CircularQueue -> Queue; a new instance
		- Sorting.IntroSort<Position>(positions, 0, positions.Length, PositionComparer.Default)
			-> Array.Sort(positions, PositionComparer.Default);
		

          